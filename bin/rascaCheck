#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(File.dirname(__FILE__))

require 'rubygems'
require 'optparse'
require 'rasca'
require 'fileutils'

# Defaults
@debug=false
@verbose=false
@print_only=false
@proactive=false
@forget=false
@config_dir=nil # We use a default in the class

# Stale lock threshold. Seconds to consider a lockfile as stale
@stale_limit=4*60*60

# Persistent data dir
@data_dir="/var/lib/modularit/data"

# Show info
@show_info=false

# Lockdir
@lockdir="/var/lock/subsys"

# Map Check name to Class
CHECKS = { "HostChk" => "CheckPingHost", "ProcChk" => "CheckProcess", "DfChk" => "CheckFSUsage", "RaidChk" => "CheckRAID",
            "SecPassChk" => "CheckSecUsers", "SecRootKitChk" => "CheckSecRootKit", "GitChk" => "CheckGit",
            "PuppetChk" => "CheckPuppet", "UPSChk" => "CheckUPS", "BackupChk" => "CheckBackup", 
            "SecPkgChk" => "CheckSecPkg", "TWChk" => "CheckTripwire", "DirvishChk" => "CheckDirvish" }

options = OptionParser.new do |opts|
  opts.on("-d", "--debug", "Show debug messages") do |opt|
    @debug=true
  end
  opts.on("-v", "--verbose", "Be verbose") do |opt|
    @verbose = true
  end
  opts.on("-p", "--proactive", "Be proactive") do |opt|
    @proactive = true
  end
  opts.on("--print_only", "Disable notifications. Just print") do |opt|
    @print_only = true
  end
  opts.on("-c", "--config_dir [ARG]", "Use this config dir instead of the default") do |opt|
    @config_dir = opt
  end
  opts.on("-i", "--info", "Show info about the Check. Do NOT run the check") do |opt|
    @show_info = true
  end
  opts.on("-f", "--forget", "Forget history") do |opt|
    @forget = true
  end
  opts.on("--print_config", "Print configuration in YAML format (from config file and parameters)") do |opt|
    # Nothing yet
    exit 0
  end
  opts.on("--version", "Print version and exit") do |opt|
    puts "RASCA version #{Rasca::VERSION}"
    exit 0
  end
end

begin
  options.parse!(ARGV)
rescue OptionParser::InvalidOption => e
  puts e
  puts options
  exit 1
end

@checks=Array.new

if ARGV.length != 0
  @checks=ARGV.entries
else
  @checks.push(File.basename($0))
end

@checks.each do |file|
  # Remove -picacaller for compatibility with PIFIA scheduler
  check=file.sub(/-picacaller$/,"")
  # Either map to old name, or use class directly
  if CHECKS.has_key? check
      @classname=CHECKS[check]
  elsif Rasca.const_defined? check
      @classname=check
  else
    puts "Unknown check: #{check}. Skipping"
    next
  end
  # Forget history if asked
  FileUtils.rm_f "#{@data_dir}/#{check}/#{@classname}.json" if @forget
  # Create an objet of class @classname
  @check=Rasca.const_get(@classname).new(check,@config_dir,@debug,@verbose)
  # If show_info, we only want information about the check
  if @show_info
    puts @check.info
  else
    @check.proactive=true if @proactive
    if @print_only
      @check.initNotifications({:print => nil})
    end
    # Remove stale lock files
    if File.exist? "#{@lockdir}/#{@classname}"
      mtime=File.stat("#{@lockdir}/#{@classname}").mtime
      check_time=Time.now
      if Time.now > mtime + @stale_limit
        puts "Removing stale lock file: #{mtime}" if @debug
	FileUtils.rm "#{@lockdir}/#{@classname}"
      end
    end
    # Only run if no lock file
    unless File.exist? "#{@lockdir}/#{@classname}"
      FileUtils.touch "#{@lockdir}/#{@classname}" unless @debug
      @check.check
      @check.notify
      @check.cleanup
      @check.close
      FileUtils.rm "#{@lockdir}/#{@classname}" unless @debug
    end
  end
end

